# Generated by Django 4.1.7 on 2023-02-18 16:17

import books.fields
import books.models
import books.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=200, null=True, verbose_name="first name")),
                ("middle_name", models.CharField(max_length=200, null=True, verbose_name="middle name")),
                ("surname", models.CharField(max_length=200, null=True, verbose_name="surname")),
                ("organisation_name", models.CharField(max_length=200, null=True, verbose_name="organisation name")),
            ],
            options={
                "verbose_name": "Author",
                "verbose_name_plural": "Authors",
                "ordering": ["organisation_name", "surname", "middle_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="BookEntry",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=4096, null=True, verbose_name="Title")),
                ("subtitle", models.CharField(max_length=4096, null=True, verbose_name="Subtitle")),
                (
                    "dewey",
                    books.fields.DeweyField(
                        max_length=28,
                        null=True,
                        validators=[books.validators.validate_skoufas_dewey],
                        verbose_name="Dewey",
                    ),
                ),
                ("language", models.CharField(max_length=8, null=True, verbose_name="Language")),
                ("edition", models.CharField(max_length=60, null=True, verbose_name="Edition")),
                (
                    "edition_year",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1200),
                            books.models.max_value_current_year,
                        ],
                        verbose_name="Edition Year",
                    ),
                ),
                ("pages", models.IntegerField(null=True, verbose_name="Pages")),
                ("copies", models.IntegerField(null=True, verbose_name="Copies")),
                ("volumes", models.CharField(max_length=200, null=True, verbose_name="Volumes")),
                ("notes", models.CharField(max_length=4096, null=True, verbose_name="Notes")),
                ("material", models.CharField(max_length=4096, null=True, verbose_name="Material")),
                (
                    "isbn",
                    books.fields.ISBNField(
                        max_length=28, null=True, validators=[books.validators.validate_isbn], verbose_name="ISBN"
                    ),
                ),
                (
                    "issn",
                    books.fields.ISSNField(
                        max_length=16, null=True, validators=[books.validators.validate_issn], verbose_name="ISSN"
                    ),
                ),
                (
                    "ean",
                    books.fields.EANField(
                        max_length=28, null=True, validators=[books.validators.validate_ean], verbose_name="EAN"
                    ),
                ),
                ("offprint", models.BooleanField(verbose_name="Offprint")),
                ("has_cd", models.BooleanField(verbose_name="Has CD")),
                ("has_dvd", models.BooleanField(verbose_name="Has DVD")),
            ],
            options={
                "verbose_name": "Book Entry",
                "verbose_name_plural": "Book Entries",
                "ordering": ["title", "subtitle"],
            },
        ),
        migrations.CreateModel(
            name="Curator",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=200, null=True, verbose_name="first name")),
                ("middle_name", models.CharField(max_length=200, null=True, verbose_name="middle name")),
                ("surname", models.CharField(max_length=200, null=True, verbose_name="surname")),
                ("organisation_name", models.CharField(max_length=200, null=True, verbose_name="organisation name")),
            ],
            options={
                "verbose_name": "Curator",
                "verbose_name_plural": "Curators",
                "ordering": ["organisation_name", "surname", "middle_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="DbfEntry",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("dbf_sequence", models.IntegerField(default=0, editable=False, verbose_name="DBF Sequence")),
                ("import_time", models.DateTimeField(editable=False, verbose_name="Import Time")),
            ],
            options={
                "verbose_name": "DBF entry",
                "verbose_name_plural": "DBF entries",
                "ordering": ["-import_time", "dbf_sequence"],
            },
        ),
        migrations.CreateModel(
            name="DbfEntryRow",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.IntegerField(verbose_name="Code")),
                ("value", models.CharField(max_length=65, verbose_name="Value")),
            ],
            options={
                "verbose_name": "DBF row",
                "verbose_name_plural": "DBF rows",
            },
        ),
        migrations.CreateModel(
            name="Donor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=200, null=True, verbose_name="first name")),
                ("middle_name", models.CharField(max_length=200, null=True, verbose_name="middle name")),
                ("surname", models.CharField(max_length=200, null=True, verbose_name="surname")),
                ("organisation_name", models.CharField(max_length=200, null=True, verbose_name="organisation name")),
            ],
            options={
                "verbose_name": "Donor",
                "verbose_name_plural": "Donors",
                "ordering": ["organisation_name", "surname", "middle_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="Editor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200, null=True, verbose_name="Editor")),
                ("place", models.CharField(max_length=200, null=True, verbose_name="Editor place")),
            ],
            options={
                "verbose_name": "Editor",
                "verbose_name_plural": "Editors",
                "ordering": ["name", "place"],
            },
        ),
        migrations.CreateModel(
            name="EntryNumber",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("entry_number", models.CharField(max_length=200, verbose_name="Entry number")),
                ("copies", models.IntegerField(default=0, null=True, verbose_name="Copies")),
            ],
            options={
                "verbose_name": "Entry Number",
                "verbose_name_plural": "Entry Numbers",
                "ordering": ["entry_number"],
            },
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("topic_name", models.CharField(max_length=200, verbose_name="topic")),
            ],
            options={
                "verbose_name": "Topic",
                "verbose_name_plural": "Topics",
                "ordering": ["topic_name"],
            },
        ),
        migrations.CreateModel(
            name="Translator",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=200, null=True, verbose_name="first name")),
                ("middle_name", models.CharField(max_length=200, null=True, verbose_name="middle name")),
                ("surname", models.CharField(max_length=200, null=True, verbose_name="surname")),
                ("organisation_name", models.CharField(max_length=200, null=True, verbose_name="organisation name")),
            ],
            options={
                "verbose_name": "Translator",
                "verbose_name_plural": "Translators",
                "ordering": ["organisation_name", "surname", "middle_name", "first_name"],
            },
        ),
        migrations.AddConstraint(
            model_name="translator",
            constraint=models.UniqueConstraint(
                fields=("organisation_name", "surname", "middle_name", "first_name"), name="unique_translator"
            ),
        ),
        migrations.AddConstraint(
            model_name="topic",
            constraint=models.UniqueConstraint(fields=("topic_name",), name="unique_topic_name"),
        ),
        migrations.AddField(
            model_name="entrynumber",
            name="book_entry",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="books.bookentry", verbose_name="Book Entry"
            ),
        ),
        migrations.AddField(
            model_name="entrynumber",
            name="entry_number_donors",
            field=models.ManyToManyField(blank=True, to="books.donor", verbose_name="Donor"),
        ),
        migrations.AddConstraint(
            model_name="editor",
            constraint=models.UniqueConstraint(fields=("name", "place"), name="unique_editor"),
        ),
        migrations.AddConstraint(
            model_name="donor",
            constraint=models.UniqueConstraint(
                fields=("organisation_name", "surname", "middle_name", "first_name"), name="unique_donor"
            ),
        ),
        migrations.AddField(
            model_name="dbfentryrow",
            name="dbfentry",
            field=models.ForeignKey(
                editable=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="books.dbfentry",
                verbose_name="DBF entry",
            ),
        ),
        migrations.AddField(
            model_name="dbfentry",
            name="book_entry",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="books.bookentry", verbose_name="Book Entry"
            ),
        ),
        migrations.AddConstraint(
            model_name="curator",
            constraint=models.UniqueConstraint(
                fields=("organisation_name", "surname", "middle_name", "first_name"), name="unique_curator"
            ),
        ),
        migrations.AddField(
            model_name="bookentry",
            name="authors",
            field=models.ManyToManyField(blank=True, to="books.author", verbose_name="Author"),
        ),
        migrations.AddField(
            model_name="bookentry",
            name="curators",
            field=models.ManyToManyField(blank=True, to="books.curator", verbose_name="Curator"),
        ),
        migrations.AddField(
            model_name="bookentry",
            name="editor",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="books.editor", verbose_name="editor"
            ),
        ),
        migrations.AddField(
            model_name="bookentry",
            name="entry_donors",
            field=models.ManyToManyField(blank=True, to="books.donor", verbose_name="Donor"),
        ),
        migrations.AddField(
            model_name="bookentry",
            name="topics",
            field=models.ManyToManyField(blank=True, to="books.topic", verbose_name="Topic"),
        ),
        migrations.AddField(
            model_name="bookentry",
            name="translators",
            field=models.ManyToManyField(blank=True, to="books.translator", verbose_name="Translator"),
        ),
        migrations.AddConstraint(
            model_name="author",
            constraint=models.UniqueConstraint(
                fields=("organisation_name", "surname", "middle_name", "first_name"), name="unique_author"
            ),
        ),
        migrations.AddConstraint(
            model_name="entrynumber",
            constraint=models.UniqueConstraint(fields=("entry_number",), name="unique_entry_number"),
        ),
        migrations.AlterOrderWithRespectTo(
            name="dbfentryrow",
            order_with_respect_to="dbfentry",
        ),
        migrations.AlterUniqueTogether(
            name="dbfentryrow",
            unique_together={("dbfentry", "code")},
        ),
        migrations.AddConstraint(
            model_name="dbfentry",
            constraint=models.UniqueConstraint(fields=("dbf_sequence",), name="unique_dbf_sequence"),
        ),
    ]
